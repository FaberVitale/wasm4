import { Framebuffer } from "./framebuffer";
import { WebGLCompositor } from "./compositor";
export declare class Runtime {
    canvas: HTMLCanvasElement;
    diskName: string;
    memory: WebAssembly.Memory;
    apu: any;
    compositor: WebGLCompositor;
    data: DataView;
    framebuffer: Framebuffer;
    pauseState: number;
    wasmBufferByteLen: number;
    wasm?: WebAssembly.Instance;
    warnedFileSize: boolean;
    constructor();
    init(): Promise<void>;
    setMouse(x: number, y: number, buttons: number): void;
    setGamepad(idx: number, buttons: number): void;
    getGamepad(idx: number): number;
    getSystemFlag(mask: number): number;
    maskGamepad(idx: number, mask: number, down: boolean): void;
    unlockAudio(): void;
    pauseAudio(): void;
    reset(zeroMemory?: boolean): void;
    load(wasmBuffer: ArrayBuffer | Uint8Array): Promise<void>;
    safeCall(fn?: null | undefined | WebAssembly.ExportValue): Promise<void>;
    text(textPtr: number, x: number, y: number): void;
    textUtf8(textPtr: number, byteLength: number, x: number, y: number): void;
    textUtf16(textPtr: number, byteLength: number, x: number, y: number): void;
    blit(spritePtr: number, x: number, y: number, width: number, height: number, flags: number): void;
    blitSub(spritePtr: number, x: number, y: number, width: number, height: number, srcX: number, srcY: number, stride: number, flags: number): void;
    diskr(destPtr: number, size: number): number;
    diskw(srcPtr: number, size: number): number;
    getCString(ptr: number): string;
    print(str: string, error?: boolean): void;
    trace(cstrPtr: number): void;
    traceUtf8(strUtf8Ptr: number, byteLength: number): void;
    traceUtf16(strUtf16Ptr: number, byteLength: number): void;
    tracef(fmtPtr: number, argPtr: number): void;
    start(): void;
    update(): void;
    blueScreen(err: Error): void;
    composite(): void;
    updateIdleState: () => void;
}
